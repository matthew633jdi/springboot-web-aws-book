buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'org.springframework.boot' version '2.7.2'
    // queryDsl
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}
// apply plugin과 buildscript (gradle 4.3 previous) -> plugins (gradle 4.3 after)

group = "org.example"
version = "1.0-SNAPSHOT"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    // jcenter deprecated
}

dependencies {
    // compile -> implementation
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // queryDsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    // lombok
    // plugin 설치
    // settings - Build, Execution, Deployment - Compiler - Annotation Processors - Enable annotation processing 활성화
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')


    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'

    // mustache
    implementation 'org.springframework.boot:spring-boot-starter-mustache'

    // spring security - social login
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // spring session jdbc
    implementation 'org.springframework.session:spring-session-jdbc'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.test {
    useJUnitPlatform()
}

// queryDsl
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {    // IDE의 소스 폴더에 자동으로 넣어줌
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath   // 컴파일 시 같이 수행
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl   // Q파일 생성
}